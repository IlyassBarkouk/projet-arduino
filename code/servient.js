// Configuration MQTT
const mqtt = require("mqtt");
const servient = mqtt.connect("mqtt://localhost/servient");
const mqttClient = mqtt.connect("mqtt://localhost/webserver");

servient.on("connect", () => {
  console.log("Servient connect√© au broker MQTT");

  // Abonnement aux topics
  servient.subscribe("detection", (err) => {
    if (!err) console.log("Abonn√© √† detection");
  });
  servient.subscribe("code_entered", (err) => {
    if (!err) console.log("Abonn√© √† code_entered");
  });
  servient.subscribe("porte", (err) => {
    if (!err) console.log("Abonn√© √† l'ouverture de porte");
  });

  servient.subscribe("alarm", (err) => {
    if (!err) console.log("Abonn√© √† l'alarme");
  });

  servient.subscribe("porteStatus", (err) => {
    if (!err) console.log("Abonn√© au status porte");
  });
  servient.subscribe("porteOpen", (err) => {
    if (!err) console.log("Abonn√© √† l'ouverture de porte");
  });
  servient.subscribe("porteClose", (err) => {
    if (!err) console.log("Abonn√© √† la fermeture de porte");
  });
  servient.subscribe("alarmStatus", (err) => {
    if (!err) console.log("Abonn√© au status alarme");
  });
  servient.subscribe("alarmActivate", (err) => {
    if (!err) console.log("Abonn√© √† l'activation d'alarme");
  });
  servient.subscribe("alarmDeactivate", (err) => {
    if (!err) console.log("Abonn√© √† la desactivation d'alarme");
  });
});

servient.on("message", (topic, message) => {
  if (topic === "detection") {
    console.log("D√©tection :", message.toString());
    servient.publish("Active_button", "Activation du bouton");
  } else if (topic === "code_entered") {
    console.log("Code entr√© re√ßu :", message.toString());
    // V√©rifier si le code a une longueur de 4 caract√®res
    if (message.toString().length === 4) {
      console.log(
        "Code valide (4 caract√®res), envoi au Webserver pour validation"
      );
      mqttClient.publish("code_to_validate", message.toString());
    } /* else {
      console.log("Code invalide (longueur != 4), ignor√©");
    }*/
  } else if (topic === "porte") {
    console.log("Ouverture de la porte :", message.toString());
    servient.publish("code_correct", "Ouvrir la porte");
  } else if (topic === "alarm") {
    console.log("Code incorrect, la porte reste ferm√©e");
    servient.publish("code_incorrect", "Activation de l'alarme");
  } else if (topic === "porteStatus") {
    let etatPorte = message.toString();
    console.log("√âtat de la porte re√ßu :", etatPorte);

    if (etatPorte === "ouverte") {
      console.log("La porte est ouverte.");
      // Effectuer une action si besoin
    } else if (etatPorte === "ferm√©e") {
      console.log("La porte est ferm√©e.");
      // Effectuer une action si besoin
    }

    mqttClient.publish("porteStatusResponse", etatPorte);
  } else if (topic === "porteOpen") {
    console.log("Ouverture de la porte cote client :", message.toString());
    servient.publish("code_correct", "Ouvrir la porte client");
  } else if (topic === "porteClose") {
    console.log("Fermeture de la porte cote client:", message.toString());
    servient.publish("porteClose", "Fermer la porte");
  } else if (topic === "alarmStatus") {
    let etatAlarme = message.toString();
    console.log("üö® √âtat de l'alarme re√ßu :", etatAlarme);

    if (etatAlarme === "activ√©e") {
      console.log("L'alarme est activ√©e.");
      // Effectuer une action si besoin (ex: allumer un voyant d'alarme)
    } else if (etatAlarme === "d√©sactiv√©e") {
      console.log("L'alarme est d√©sactiv√©e.");
      // Effectuer une action si besoin (ex: √©teindre un voyant d'alarme)
    }

    // Publier la r√©ponse avec l'√©tat actuel de l'alarme
    mqttClient.publish("alarmStatusResponse", etatAlarme);
  } else if (topic === "alarmActivate") {
    console.log("Activation d'alarme cote client :", message.toString());
    servient.publish("alarm_activate", "Active alarme");
  } else if (topic === "alarmDeactivate") {
    console.log("Deactivation d'alarme cote client:", message.toString());
    servient.publish("alarm_deactivate", "Deactive alarme");
  }
});
